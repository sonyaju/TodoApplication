@{
    /**/

    ViewBag.Title = "Index";
}
<h2>Production To Do List </h2>
<!-- Add icon library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style type="text/css">

    body {
        margin: 40px;
        font-family: "Arial", "Helventica", sans-serif;
    }

    label {
        width: 80px;
        text-align: center;
        display: inline-block;
    }

    table {
        padding-top: 1em;
    }

    th, td {
        padding: .1em 2em;
        text-align: left;
        width: 400px;
        height: 40px;
        color: royalblue;
        font: 3em;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2
    }

    tr:hover {
        background-color: #c1e2fa
    }

    thead, tfoot {
        //font-weight: bold;
        font-size: large;
        padding: 0;
        background-color: lightgrey;
        text-align: left;
    }

    text {
        background: #b5b5b5;
        outline: medium;
    }

    button {
        display: inline-block;
        outline: none;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        padding: .4em 1.1em .4em;
        color: #fef4e9;
        border: solid 1px #006fb9;
        background: #1276bb;
    }

        button:hover {
            text-decoration: none;
            background: #282828;
            border: solid 1px #000;
        }

    input {
        width: 100px;
    }

    td li, td ul {
        margin: 0;
        padding: 0;
    }

    td li {
        display: inline;
    }

        td li::after {
            content: ',';
        }

        td li:last-child::after {
            content: '';
        }

    .btn {
        background-color: DodgerBlue;
        border: none;
        color: white;
        padding: 12px 16px;
        font-size: 16px;
        cursor: pointer;
    }

    .btndelete {
        background-color: DodgerBlue;
        border: none;
        color: white;
        padding: 12px 16px;
        font-size: 16px;
        cursor: pointer;
    }

    /* Darker background on mouse-over */
    .btn:hover {
        background-color: #0066cc;
        color: white;
    }
    /* Darker background on mouse-over */
    .btndelete:hover {
        background-color: orangered;
        border-color: orangered;
    }

    .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 120px;
            background-color: grey;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            /* Position the tooltip */
            position: absolute;
            z-index: 1;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }


    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        width: 40%;
        height: 40%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s
    }

    /* The Close Button */
    .close {
        color: white;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .modal-header {
        padding: 2px 16px;
        background-color: grey;
        color: white;
    }

    .modal-body {
        padding: 2px 16px;
    }

    .toastalert {
        width: auto;
        height: auto;        
        position: absolute;
        left: 50%;
        margin-left: -100px;
        top: 70px;
        background-color: #383838;
        color: #F0F0F0;
        font-family: Calibri;
        font-size: 20px;
        padding: 10px;
        text-align: center;
        border-radius: 2px;
        -webkit-box-shadow: 0px 0px 24px -1px rgba(56, 56, 56, 1);
        -moz-box-shadow: 0px 0px 24px -1px rgba(56, 56, 56, 1);
        box-shadow: 0px 0px 24px -1px rgba(56, 56, 56, 1);
    }
</style>
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/knockout-3.4.2.js"></script>
<div>
    <button id="addButton" class="btn" title="Click here to add new Task" data-bind="click: function () { ToDoViewModel.addnewRecord(); }">
        <i class="fa fa-plus-circle" aria-hidden="true"></i> Add New Item
    </button>
    <br />
    <br />
    <div id="errorText"></div>

    <table>
        <thead>
            <tr>
                <th hidden>
                    SlNo
                </th>
                <th>
                    Item
                </th>
                <th>
                    Description
                </th>
                <th>
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody data-bind="template: { name: currentTemplate, foreach: Todos }"></tbody>
    </table>
    <br />
    <br />
    <br />
    <br />

</div>

@*Show the toast alert*@
<div id='toastalert' class='toastalert' style='display:none'></div>


<!-- The Modal -->
<div id="AddItemModal" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
        <div class="modal-header">
            @*<span class="close" data-bind="click: function () { ToDoViewModel.reset(); }">&times;</span>*@
            <h3>Add New Item</h3>
        </div>

        <div class="modal-body">
            <div class="form-group">
                <br />
                <label for="item" class="control-label col-xs-4">Task Item</label>
                <div class="input-group col-xs-7">
                    @*<input type="text" name="dummyText" id="txtItem" class="form-control" />*@
                    <input type="text" maxlength="25" data-bind="value: $data.Item" id="itm" />
                </div>
            </div>
            <div class="form-group">
                <label for="desc" class="control-label col-xs-4">Description</label>
                <div class="input-group col-xs-7">
                    @*<input type="text" name="dummyText" id="txtDescription" class="form-control" />*@
                    <input type="text" maxlength="50" data-bind="value: $data.Description" id="desc" />
                </div>
            </div>
            <button class="btn" data-bind="click: ToDoViewModel.saveToDo">
                <i class="fa fa-save"></i>
                Save
            </button>

            <button class="btn" data-bind="click: function () { ToDoViewModel.reset(); }">
                <i class="fa fa-times-circle"></i>
                Close
            </button>
        </div>
    </div>
</div>

<br />
<br />
<div>

    <script type="text/html" id="readonlyTemplate">
        @*  <table>*@
        <tr>
            <td hidden>
                <span data-bind="text: SlNo"></span>
            </td>
            <td>
                <span data-bind="text: Item"></span>
            </td>
            <td>
                <span data-bind="text: Description"></span>
            </td>
            <td>
                <button class="btn" data-bind="click: function () { ToDoViewModel.editTemplate($data);}">
                    <i class="fa fa-edit"></i> Edit
                </button>
            </td>
            <td>
                <button class="btndelete" data-bind="click: function () { ToDoViewModel.deleteToDo($data); }">
                    <i class="fa fa-trash"></i> Delete
                </button>
            </td>
        </tr>
        @* </table>*@
    </script>
</div>
<script type="text/html" id="editTemplate">
    @* <table>*@
    <tr>
        <td hidden>
            <input type="text" data-bind="value: $data.SlNo" id="sno" disabled="disabled" />
        </td>
        <td>
            <input type="text" maxlength="25" data-bind="value: $data.Item" id="itm" />
        </td>
        <td>
            <input type="text" maxlength="50" data-bind="value: $data.Description" id="desc" />
        </td>

        <td>
            <button class="btn" data-bind="click: ToDoViewModel.saveToDo">
                <i class="fa fa-save"></i>
                Save
            </button>
        </td>
        <td>
            <button class="btn" data-bind="click: function () { ToDoViewModel.reset(); }">
                <i class="fa fa-times-circle"></i>
                Cancel
            </button>
        </td>
    </tr>
    @*       </table>*@
</script>

<script type="text/javascript">
    var self = this;
    var modal = $('#AddItemModal')[0];

    //Boolean to check wheather the operation is for Edit and New Record
    var IsNewRecord = false;
    self.Todos = ko.observableArray([]);
    loadTodo();

    //Method to Load all To do items by making call to WEB API GET method
    function loadTodo() {
        //clear the inner html error list
        $.ajax({
            type: "GET",
            url: "api/ToDo",
            success: function (data) {
                self.Todos(data.responseBody.todo);
            },
            error: function (err) {
                alert(err.status + ", Please retry after some time");
            }
        });

    };

    // Todo Object is created and initialized
    function Todo(no, itm, desc) {
        return {
            SlNo: ko.observable(no),
            Item: ko.observable(itm),
            Description: ko.observable(desc)
        }
    };

    //The ViewModel where the Templates are initialized
    var ToDoViewModel = {
        readonlyTemplate: ko.observable("readonlyTemplate"),
        editTemplate: ko.observable()
    };

    // Method to decide the Current Template (readonlyTemplate or editTemplate)
    ToDoViewModel.currentTemplate = function (tmpl) {
        return tmpl === this.editTemplate() ? 'editTemplate' : this.readonlyTemplate();
    }.bind(ToDoViewModel);

    // Method to create a new entry When the Add New Record button is clicked
    // Add New()
    ToDoViewModel.addnewRecord = function () {        
        modal.style.display = "block";
        //clear the inner html error list
        $("#errorText").html("");
        // self.Todos.push(new Todo(0, "", ""));       
        $('#itm').val("");
        $('#desc').val("");
        $("#addButton").prop('disabled', true);
        //  this.readonlyTemplate("editTemplate");
        IsNewRecord = true; //Set the Check for the New Record

    };

    //Method to Save the Record (This is used for Edit and Add New Record)
    // Save()
    ToDoViewModel.saveToDo = function (d) {

        //enabling add button on save click
        $("#addButton").prop('disabled', false);
        var ToDo = {};
        ToDo.SlNo = d.SlNo;
        ToDo.Item = d.Item;
        ToDo.Description = d.Description;
        //clearing error innerhtml
        $("#errorText").html("");

        //Edit Existing Record
        if (IsNewRecord === false) {
            $.ajax({
                type: "PUT",
                url: "api/ToDo/" + ToDo.SlNo,
                data: ToDo,
                success: function (data) {
                    if (data.responseHeader.statusMessage == "Error") {
                        $(document).ready(function () {
                            $('#toastalert').text('Error occured').stop().fadeIn(400).delay(1500).fadeOut(400);
                        });
                        //handling error response, for list of errors
                        //var []errorList = data.responseHeader.error;
                        $.each(data.responseHeader.error, function (i, currentError) {
                            $.each(currentError, function (key, value) {
                                if (key == "errorMessage") {
                                    //alert(value);
                                    if (i < data.responseHeader.error.length - 1) {
                                        $("#errorText").append("<li>" + value + "</li>");
                                        $("#errorText").css({ "color": "red" });
                                    }
                                }
                            });
                        });
                    }
                    else {
                        //Add success condition
                      //  alert("Task Edited Successfully");
                        $(document).ready(function () {
                            $('#toastalert').text('Task Updated').stop().fadeIn(400).delay(1500).fadeOut(400);
                        });
                    }

                    ToDoViewModel.reset();
                    loadTodo();
                },
                error: function (err) {
                    alert("Error Occured, Please Reload the Page and Try Again " + err.status);
                    ToDoViewModel.reset();
                }
            });
        }

        //Add New Record
        if (IsNewRecord === true) {
            IsNewRecord = false;
            $.ajax({
                type: "POST",
                url: "api/ToDo",
                data: ToDo,
                success: function (data) {
                    if (data.responseHeader.statusMessage == "Error") {
                        $(document).ready(function () {
                            $('#toastalert').text('Error occured').stop().fadeIn(400).delay(1500).fadeOut(400);
                        });
                        //handling error response, for list of errors
                        $.each(data.responseHeader.error, function (i, currentError) {
                            $.each(currentError, function (key, value) {
                                if (key == "errorMessage") {
                                    if (i < data.responseHeader.error.length - 1) {
                                        $("#errorText").append("<li>" + value + "</li>");
                                        $("#errorText").css({ "color": "red" });
                                    }
                                    else if (i == 0) {
                                        $("#errorText").append("<li>" + value + "</li>");
                                        $("#errorText").css({ "color": "red" });
                                    }

                                }
                            });
                        });
                    }
                    else {
                        //Add success condition
                        $(document).ready(function () {
                            $('#toastalert').text('Task Added').stop().fadeIn(400).delay(1500).fadeOut(400);
                        });
                    }
                    ToDoViewModel.reset();
                    loadTodo();
                },
                error: function (err) {
                    alert("Error Occured, Please Reload the Page and Try Again " + err.status);
                    ToDoViewModel.reset();
                }
            });
        }
    }

    // Method to Delete the Record
    // Delete()
    ToDoViewModel.deleteToDo = function (d) {
        $("#errorText").html("");
        $.ajax({
            type: "DELETE",
            url: "api/ToDo/" + d.SlNo,
            success: function (data) {
                if (data.responseHeader.statusMessage == "Error") {
                    $(document).ready(function () {
                        $('#toastalert').text('Error occured').stop().fadeIn(400).delay(1500).fadeOut(400);
                    });
                    //handling error response, for list of errors
                    $.each(data.responseHeader.error, function (i, currentError) {                   
                        $.each(currentError, function (key, value) {
                            if (key == "errorMessage") {
                                //alert(value);
                                if (i < data.responseHeader.error.length - 1) {
                                    $("#errorText").append("<li>" + value + "</li>");
                                    $("#errorText").css({ "color": "red" });
                                }
                            }
                        });
                    });
                }
                else {
                    //Add success condition
                   // alert("Task Deleted Successfully");
                    $(document).ready(function () {
                        $('#toastalert').text('Task Deleted').stop().fadeIn(400).delay(1500).fadeOut(400);
                    });
                }
                ToDoViewModel.reset();
                loadTodo();
            },
            error: function (err) {
                alert("Error Occured, Please Reload the Page and Try Again " + err.status);
                ToDoViewModel.reset();
            }
        });
    };

    //Method to Reset the template
    // Reset()
    ToDoViewModel.reset = function (t) {
        modal.style.display = "none";
        //clear the values in modal
       $('#itm').val("");
       $('#desc').val("");
        this.editTemplate("readonlyTemplate");
        $("#addButton").prop('disabled', false);
        loadTodo();
    };
    ko.applyBindings(ToDoViewModel);</script>


